// Code generated by protoc-gen-go.
// source: types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	Operation
	Checkpoint
	Entry
	ViewChange
	Result
	Request
	RequestClient
	RequestPrePrepare
	RequestPrepare
	RequestCommit
	RequestCheckpoint
	RequestViewChange
	RequestAck
	RequestNewView
	Reply
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Operation struct {
	Value uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Checkpoint struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Digest   string `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty"`
}

func (m *Checkpoint) Reset()                    { *m = Checkpoint{} }
func (m *Checkpoint) String() string            { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()               {}
func (*Checkpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Entry struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Digest   string `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty"`
	View     uint64 `protobuf:"varint,3,opt,name=view" json:"view,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ViewChange struct {
	View        uint64        `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Sequence    uint64        `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	Checkpoints []*Checkpoint `protobuf:"bytes,3,rep,name=checkpoints" json:"checkpoints,omitempty"`
	Prepares    []*Entry      `protobuf:"bytes,4,rep,name=prepares" json:"prepares,omitempty"`
	Preprepares []*Entry      `protobuf:"bytes,5,rep,name=preprepares" json:"preprepares,omitempty"`
	Viewchanger uint64        `protobuf:"varint,6,opt,name=viewchanger" json:"viewchanger,omitempty"`
}

func (m *ViewChange) Reset()                    { *m = ViewChange{} }
func (m *ViewChange) String() string            { return proto.CompactTextString(m) }
func (*ViewChange) ProtoMessage()               {}
func (*ViewChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ViewChange) GetCheckpoints() []*Checkpoint {
	if m != nil {
		return m.Checkpoints
	}
	return nil
}

func (m *ViewChange) GetPrepares() []*Entry {
	if m != nil {
		return m.Prepares
	}
	return nil
}

func (m *ViewChange) GetPreprepares() []*Entry {
	if m != nil {
		return m.Preprepares
	}
	return nil
}

type Result struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Request struct {
	// Types that are valid to be assigned to Value:
	//	*Request_Client
	//	*Request_Preprepare
	//	*Request_Prepare
	//	*Request_Commit
	//	*Request_Checkpoint
	//	*Request_Viewchange
	//	*Request_Ack
	//	*Request_Newview
	Value isRequest_Value `protobuf_oneof:"value"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isRequest_Value interface {
	isRequest_Value()
}

type Request_Client struct {
	Client *RequestClient `protobuf:"bytes,1,opt,name=client,oneof"`
}
type Request_Preprepare struct {
	Preprepare *RequestPrePrepare `protobuf:"bytes,2,opt,name=preprepare,oneof"`
}
type Request_Prepare struct {
	Prepare *RequestPrepare `protobuf:"bytes,3,opt,name=prepare,oneof"`
}
type Request_Commit struct {
	Commit *RequestCommit `protobuf:"bytes,4,opt,name=commit,oneof"`
}
type Request_Checkpoint struct {
	Checkpoint *RequestCheckpoint `protobuf:"bytes,5,opt,name=checkpoint,oneof"`
}
type Request_Viewchange struct {
	Viewchange *RequestViewChange `protobuf:"bytes,6,opt,name=viewchange,oneof"`
}
type Request_Ack struct {
	Ack *RequestAck `protobuf:"bytes,7,opt,name=ack,oneof"`
}
type Request_Newview struct {
	Newview *RequestNewView `protobuf:"bytes,8,opt,name=newview,oneof"`
}

func (*Request_Client) isRequest_Value()     {}
func (*Request_Preprepare) isRequest_Value() {}
func (*Request_Prepare) isRequest_Value()    {}
func (*Request_Commit) isRequest_Value()     {}
func (*Request_Checkpoint) isRequest_Value() {}
func (*Request_Viewchange) isRequest_Value() {}
func (*Request_Ack) isRequest_Value()        {}
func (*Request_Newview) isRequest_Value()    {}

func (m *Request) GetValue() isRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Request) GetClient() *RequestClient {
	if x, ok := m.GetValue().(*Request_Client); ok {
		return x.Client
	}
	return nil
}

func (m *Request) GetPreprepare() *RequestPrePrepare {
	if x, ok := m.GetValue().(*Request_Preprepare); ok {
		return x.Preprepare
	}
	return nil
}

func (m *Request) GetPrepare() *RequestPrepare {
	if x, ok := m.GetValue().(*Request_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *Request) GetCommit() *RequestCommit {
	if x, ok := m.GetValue().(*Request_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Request) GetCheckpoint() *RequestCheckpoint {
	if x, ok := m.GetValue().(*Request_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (m *Request) GetViewchange() *RequestViewChange {
	if x, ok := m.GetValue().(*Request_Viewchange); ok {
		return x.Viewchange
	}
	return nil
}

func (m *Request) GetAck() *RequestAck {
	if x, ok := m.GetValue().(*Request_Ack); ok {
		return x.Ack
	}
	return nil
}

func (m *Request) GetNewview() *RequestNewView {
	if x, ok := m.GetValue().(*Request_Newview); ok {
		return x.Newview
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_Client)(nil),
		(*Request_Preprepare)(nil),
		(*Request_Prepare)(nil),
		(*Request_Commit)(nil),
		(*Request_Checkpoint)(nil),
		(*Request_Viewchange)(nil),
		(*Request_Ack)(nil),
		(*Request_Newview)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// value
	switch x := m.Value.(type) {
	case *Request_Client:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Client); err != nil {
			return err
		}
	case *Request_Preprepare:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Preprepare); err != nil {
			return err
		}
	case *Request_Prepare:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *Request_Commit:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *Request_Checkpoint:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Checkpoint); err != nil {
			return err
		}
	case *Request_Viewchange:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Viewchange); err != nil {
			return err
		}
	case *Request_Ack:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {
			return err
		}
	case *Request_Newview:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Newview); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Value has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 1: // value.client
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestClient)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Client{msg}
		return true, err
	case 2: // value.preprepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestPrePrepare)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Preprepare{msg}
		return true, err
	case 3: // value.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestPrepare)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Prepare{msg}
		return true, err
	case 4: // value.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestCommit)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Commit{msg}
		return true, err
	case 5: // value.checkpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestCheckpoint)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Checkpoint{msg}
		return true, err
	case 6: // value.viewchange
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestViewChange)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Viewchange{msg}
		return true, err
	case 7: // value.ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAck)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Ack{msg}
		return true, err
	case 8: // value.newview
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestNewView)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Newview{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// value
	switch x := m.Value.(type) {
	case *Request_Client:
		s := proto.Size(x.Client)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Preprepare:
		s := proto.Size(x.Preprepare)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Checkpoint:
		s := proto.Size(x.Checkpoint)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Viewchange:
		s := proto.Size(x.Viewchange)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Ack:
		s := proto.Size(x.Ack)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Newview:
		s := proto.Size(x.Newview)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RequestClient struct {
	Op        *Operation `protobuf:"bytes,1,opt,name=op" json:"op,omitempty"`
	Timestamp string     `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Client    string     `protobuf:"bytes,3,opt,name=client" json:"client,omitempty"`
}

func (m *RequestClient) Reset()                    { *m = RequestClient{} }
func (m *RequestClient) String() string            { return proto.CompactTextString(m) }
func (*RequestClient) ProtoMessage()               {}
func (*RequestClient) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RequestClient) GetOp() *Operation {
	if m != nil {
		return m.Op
	}
	return nil
}

type RequestPrePrepare struct {
	View     uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	Digest   string `protobuf:"bytes,3,opt,name=digest" json:"digest,omitempty"`
	Replica  uint64 `protobuf:"varint,4,opt,name=replica" json:"replica,omitempty"`
}

func (m *RequestPrePrepare) Reset()                    { *m = RequestPrePrepare{} }
func (m *RequestPrePrepare) String() string            { return proto.CompactTextString(m) }
func (*RequestPrePrepare) ProtoMessage()               {}
func (*RequestPrePrepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type RequestPrepare struct {
	View     uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	Digest   string `protobuf:"bytes,3,opt,name=digest" json:"digest,omitempty"`
	Replica  uint64 `protobuf:"varint,4,opt,name=replica" json:"replica,omitempty"`
}

func (m *RequestPrepare) Reset()                    { *m = RequestPrepare{} }
func (m *RequestPrepare) String() string            { return proto.CompactTextString(m) }
func (*RequestPrepare) ProtoMessage()               {}
func (*RequestPrepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type RequestCommit struct {
	View     uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	Replica  uint64 `protobuf:"varint,3,opt,name=replica" json:"replica,omitempty"`
}

func (m *RequestCommit) Reset()                    { *m = RequestCommit{} }
func (m *RequestCommit) String() string            { return proto.CompactTextString(m) }
func (*RequestCommit) ProtoMessage()               {}
func (*RequestCommit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type RequestCheckpoint struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Digest   string `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty"`
	Replica  uint64 `protobuf:"varint,3,opt,name=replica" json:"replica,omitempty"`
}

func (m *RequestCheckpoint) Reset()                    { *m = RequestCheckpoint{} }
func (m *RequestCheckpoint) String() string            { return proto.CompactTextString(m) }
func (*RequestCheckpoint) ProtoMessage()               {}
func (*RequestCheckpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type RequestViewChange struct {
	View        uint64        `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Sequence    uint64        `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	Checkpoints []*Checkpoint `protobuf:"bytes,3,rep,name=checkpoints" json:"checkpoints,omitempty"`
	Prepares    []*Entry      `protobuf:"bytes,4,rep,name=prepares" json:"prepares,omitempty"`
	Preprepares []*Entry      `protobuf:"bytes,5,rep,name=preprepares" json:"preprepares,omitempty"`
	Replica     uint64        `protobuf:"varint,6,opt,name=replica" json:"replica,omitempty"`
}

func (m *RequestViewChange) Reset()                    { *m = RequestViewChange{} }
func (m *RequestViewChange) String() string            { return proto.CompactTextString(m) }
func (*RequestViewChange) ProtoMessage()               {}
func (*RequestViewChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RequestViewChange) GetCheckpoints() []*Checkpoint {
	if m != nil {
		return m.Checkpoints
	}
	return nil
}

func (m *RequestViewChange) GetPrepares() []*Entry {
	if m != nil {
		return m.Prepares
	}
	return nil
}

func (m *RequestViewChange) GetPreprepares() []*Entry {
	if m != nil {
		return m.Preprepares
	}
	return nil
}

type RequestAck struct {
	View        uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Replica     uint64 `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Viewchanger uint64 `protobuf:"varint,3,opt,name=viewchanger" json:"viewchanger,omitempty"`
	Digest      string `protobuf:"bytes,4,opt,name=digest" json:"digest,omitempty"`
}

func (m *RequestAck) Reset()                    { *m = RequestAck{} }
func (m *RequestAck) String() string            { return proto.CompactTextString(m) }
func (*RequestAck) ProtoMessage()               {}
func (*RequestAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type RequestNewView struct {
	View       uint64        `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	V          []*ViewChange `protobuf:"bytes,2,rep,name=v" json:"v,omitempty"`
	Checkpoint *Checkpoint   `protobuf:"bytes,3,opt,name=checkpoint" json:"checkpoint,omitempty"`
	X          []*ViewChange `protobuf:"bytes,4,rep,name=x" json:"x,omitempty"`
}

func (m *RequestNewView) Reset()                    { *m = RequestNewView{} }
func (m *RequestNewView) String() string            { return proto.CompactTextString(m) }
func (*RequestNewView) ProtoMessage()               {}
func (*RequestNewView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RequestNewView) GetV() []*ViewChange {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *RequestNewView) GetCheckpoint() *Checkpoint {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

func (m *RequestNewView) GetX() []*ViewChange {
	if m != nil {
		return m.X
	}
	return nil
}

type Reply struct {
	View      uint64  `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Timestamp string  `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Client    string  `protobuf:"bytes,3,opt,name=client" json:"client,omitempty"`
	Replica   uint64  `protobuf:"varint,4,opt,name=replica" json:"replica,omitempty"`
	Result    *Result `protobuf:"bytes,5,opt,name=result" json:"result,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Reply) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Operation)(nil), "types.Operation")
	proto.RegisterType((*Checkpoint)(nil), "types.Checkpoint")
	proto.RegisterType((*Entry)(nil), "types.Entry")
	proto.RegisterType((*ViewChange)(nil), "types.ViewChange")
	proto.RegisterType((*Result)(nil), "types.Result")
	proto.RegisterType((*Request)(nil), "types.Request")
	proto.RegisterType((*RequestClient)(nil), "types.RequestClient")
	proto.RegisterType((*RequestPrePrepare)(nil), "types.RequestPrePrepare")
	proto.RegisterType((*RequestPrepare)(nil), "types.RequestPrepare")
	proto.RegisterType((*RequestCommit)(nil), "types.RequestCommit")
	proto.RegisterType((*RequestCheckpoint)(nil), "types.RequestCheckpoint")
	proto.RegisterType((*RequestViewChange)(nil), "types.RequestViewChange")
	proto.RegisterType((*RequestAck)(nil), "types.RequestAck")
	proto.RegisterType((*RequestNewView)(nil), "types.RequestNewView")
	proto.RegisterType((*Reply)(nil), "types.Reply")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 627 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x56, 0xc1, 0x8e, 0xd3, 0x3c,
	0x10, 0x6e, 0xe2, 0x24, 0x6d, 0x27, 0xff, 0xfe, 0xa2, 0xd6, 0x82, 0x2c, 0x84, 0xd8, 0x12, 0x69,
	0xa5, 0x9e, 0x2a, 0x6d, 0xf7, 0xc6, 0x09, 0xa8, 0x90, 0x7a, 0x62, 0x57, 0x3e, 0x20, 0x71, 0x0c,
	0xc1, 0xea, 0x46, 0x6d, 0x13, 0x93, 0xb8, 0xed, 0xf6, 0x35, 0xb8, 0xf1, 0x1c, 0xbc, 0x16, 0xbc,
	0x03, 0xb2, 0xe3, 0xc4, 0xf1, 0x36, 0x20, 0xed, 0x22, 0x71, 0xe0, 0x96, 0xf1, 0x7c, 0x9f, 0x67,
	0xe6, 0x1b, 0xcf, 0xb4, 0x10, 0x8a, 0x03, 0x67, 0xe5, 0x94, 0x17, 0xb9, 0xc8, 0xb1, 0xaf, 0x8c,
	0xe8, 0x05, 0x0c, 0xaf, 0x38, 0x2b, 0x62, 0x91, 0xe6, 0x19, 0x3e, 0x05, 0x7f, 0x17, 0xaf, 0xb7,
	0x8c, 0x38, 0x63, 0x67, 0xe2, 0xd1, 0xca, 0x88, 0x5e, 0x01, 0xcc, 0x6f, 0x58, 0xb2, 0xe2, 0x79,
	0x9a, 0x09, 0xfc, 0x14, 0x06, 0x25, 0xfb, 0xbc, 0x65, 0x59, 0x52, 0xc3, 0x1a, 0x1b, 0x3f, 0x81,
	0xe0, 0x53, 0xba, 0x64, 0xa5, 0x20, 0xee, 0xd8, 0x99, 0x0c, 0xa9, 0xb6, 0xa2, 0x2b, 0xf0, 0xdf,
	0x66, 0xa2, 0x38, 0x3c, 0x84, 0x8c, 0x31, 0x78, 0xbb, 0x94, 0xed, 0x09, 0x52, 0x78, 0xf5, 0x1d,
	0xfd, 0x70, 0x00, 0xde, 0xa7, 0x6c, 0x3f, 0xbf, 0x89, 0xb3, 0x25, 0x6b, 0x20, 0x8e, 0x81, 0x58,
	0xa1, 0xdc, 0x3b, 0xa1, 0x2e, 0x21, 0x4c, 0x9a, 0x8a, 0x4a, 0x82, 0xc6, 0x68, 0x12, 0xce, 0x46,
	0xd3, 0x4a, 0x1e, 0x53, 0x2b, 0x6d, 0xa3, 0xf0, 0x04, 0x06, 0xbc, 0x60, 0x3c, 0x2e, 0x58, 0x49,
	0x3c, 0xc5, 0xf8, 0x4f, 0x33, 0x54, 0x6d, 0xb4, 0xf1, 0xe2, 0x29, 0x84, 0xf2, 0xbb, 0x06, 0xfb,
	0x1d, 0xe0, 0x36, 0x00, 0x8f, 0x21, 0x94, 0x29, 0x27, 0xaa, 0x98, 0x82, 0x04, 0x2a, 0xdb, 0xf6,
	0x51, 0xf4, 0x1c, 0x02, 0xca, 0xca, 0xed, 0x5a, 0xd8, 0x2d, 0x1a, 0xd6, 0x2d, 0xfa, 0x86, 0xa0,
	0x4f, 0x65, 0x75, 0xa5, 0xc0, 0x53, 0x08, 0x92, 0x75, 0xca, 0x32, 0xa1, 0x20, 0xe1, 0xec, 0x54,
	0x07, 0xd6, 0xfe, 0xb9, 0xf2, 0x2d, 0x7a, 0x54, 0xa3, 0xf0, 0x4b, 0x00, 0x93, 0x8c, 0x92, 0x2a,
	0x9c, 0x11, 0x9b, 0x73, 0x5d, 0xb0, 0xeb, 0xca, 0xbf, 0xe8, 0xd1, 0x16, 0x1a, 0x5f, 0x40, 0xbf,
	0x26, 0x22, 0x45, 0x7c, 0x7c, 0x44, 0xd4, 0xac, 0x1a, 0xa7, 0xd2, 0xcb, 0x37, 0x9b, 0x54, 0x10,
	0xaf, 0x33, 0x3d, 0xe5, 0x53, 0xe9, 0xa9, 0x2f, 0x99, 0x9e, 0xe9, 0x02, 0xf1, 0xbb, 0xd2, 0x33,
	0x1d, 0x93, 0xe9, 0x19, 0xb4, 0xe4, 0x1a, 0x15, 0x95, 0xae, 0x47, 0x5c, 0xf3, 0x8a, 0x24, 0xd7,
	0xa0, 0xf1, 0x39, 0xa0, 0x38, 0x59, 0x91, 0xbe, 0x22, 0x8d, 0x6c, 0xd2, 0xeb, 0x64, 0xb5, 0xe8,
	0x51, 0xe9, 0x97, 0x0a, 0x64, 0x6c, 0xaf, 0x5e, 0xdf, 0xa0, 0x4b, 0x81, 0x77, 0x6c, 0x2f, 0x43,
	0x48, 0x05, 0x34, 0xee, 0x4d, 0x5f, 0xb7, 0x30, 0x5a, 0xc2, 0x89, 0xd5, 0x14, 0x3c, 0x06, 0x37,
	0xe7, 0xba, 0x6d, 0x8f, 0xf4, 0x3d, 0xcd, 0x74, 0x52, 0x37, 0xe7, 0xf8, 0x19, 0x0c, 0x45, 0xba,
	0x61, 0xa5, 0x88, 0x37, 0x5c, 0xcf, 0x89, 0x39, 0x90, 0x23, 0xa4, 0x5b, 0x8f, 0xaa, 0x11, 0xaa,
	0xac, 0x68, 0x0b, 0xa3, 0xa3, 0x4e, 0xde, 0x7b, 0x68, 0xcc, 0x7c, 0x22, 0x6b, 0x3e, 0x09, 0xf4,
	0x0b, 0xc6, 0xd7, 0x69, 0x12, 0xab, 0x8e, 0x7a, 0xb4, 0x36, 0xa3, 0x02, 0xfe, 0xb7, 0xdf, 0xc1,
	0x5f, 0x88, 0xf9, 0xc1, 0x68, 0x5a, 0xbd, 0x9f, 0xfb, 0x86, 0x6c, 0x5d, 0x8d, 0xec, 0xab, 0xe3,
	0x46, 0xc5, 0x3f, 0x5b, 0x87, 0xbf, 0x09, 0xf1, 0xdd, 0x69, 0x62, 0xfc, 0x3b, 0xeb, 0xad, 0x55,
	0x6e, 0x60, 0x97, 0x2b, 0x00, 0xcc, 0x44, 0x75, 0x96, 0xd9, 0xe2, 0xba, 0x16, 0xf7, 0xee, 0xd2,
	0x44, 0x47, 0x4b, 0xb3, 0x25, 0xbf, 0x67, 0xfd, 0x1a, 0x7d, 0x75, 0x9a, 0x77, 0xa9, 0xa7, 0xb3,
	0x33, 0xf4, 0x19, 0x38, 0x3b, 0xe2, 0x5a, 0xda, 0x99, 0x9e, 0x50, 0x67, 0x87, 0x2f, 0xac, 0xcd,
	0x84, 0xac, 0x45, 0xd1, 0x52, 0xb9, 0xbd, 0x90, 0xce, 0xc0, 0xb9, 0xd5, 0xea, 0x76, 0xdd, 0x79,
	0x1b, 0x7d, 0x71, 0xc0, 0xa7, 0x8c, 0xaf, 0x0f, 0x9d, 0x29, 0x3d, 0x68, 0xfa, 0x7f, 0x3d, 0x2c,
	0xf8, 0x1c, 0x82, 0x42, 0xfd, 0xac, 0xe8, 0xbd, 0x7a, 0xd2, 0xec, 0x2e, 0x79, 0x48, 0xb5, 0xf3,
	0x63, 0xa0, 0xfe, 0x31, 0x5c, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x06, 0xf5, 0xb7, 0xec, 0x40,
	0x08, 0x00, 0x00,
}
